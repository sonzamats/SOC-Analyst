filter {
  # Skip processing if this pipeline has already been applied
  if "ti_enriched" in [tags] {
    drop {}
  }
  
  # Process events with IP addresses for threat intelligence enrichment
  if [source_ip] or [destination_ip] or [ip] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "threat-intel-ip"
      user => "elastic"
      password => "${ELASTIC_PASSWORD:changeme}"
      query => "doc.indicator:%{[source_ip]} OR doc.indicator:%{[destination_ip]} OR doc.indicator:%{[ip]}"
      fields => {
        "feed_name" => "ti_feed_name"
        "indicator" => "ti_indicator"
        "threat_type" => "ti_threat_type"
        "confidence" => "ti_confidence"
        "description" => "ti_description"
        "first_seen" => "ti_first_seen"
        "last_seen" => "ti_last_seen"
      }
    }
    
    # If a match is found, tag the event accordingly
    if [ti_indicator] {
      mutate {
        add_field => { "event_category" => "threat" }
        add_field => { "security_severity" => "high" }
        add_tag => ["threat_intel_match", "potential_threat", "ti_enriched"]
        
        # Add MITRE ATT&CK mapping if available
        add_field => { "mitre_tactic" => "%{[ti_mitre_tactic]}" }
        add_field => { "mitre_technique" => "%{[ti_mitre_technique]}" }
      }
    }
  }
  
  # Process events with domain names for threat intelligence enrichment
  if [domain] or [url] or [hostname] {
    # Extract domain from URL if present but domain is not
    if [url] and ![domain] {
      grok {
        match => { "url" => "https?://(?<extracted_domain>[^:/]+)" }
      }
      if [extracted_domain] {
        mutate { add_field => { "domain" => "%{extracted_domain}" } }
      }
    }
    
    # Check for domain in threat intel
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "threat-intel-domain"
      user => "elastic"
      password => "${ELASTIC_PASSWORD:changeme}"
      query => "doc.indicator:%{[domain]} OR doc.indicator:%{[hostname]}"
      fields => {
        "feed_name" => "ti_feed_name"
        "indicator" => "ti_indicator"
        "threat_type" => "ti_threat_type"
        "confidence" => "ti_confidence"
        "description" => "ti_description"
        "first_seen" => "ti_first_seen"
        "last_seen" => "ti_last_seen"
      }
    }
    
    # If a match is found, tag the event accordingly
    if [ti_indicator] {
      mutate {
        add_field => { "event_category" => "threat" }
        add_field => { "security_severity" => "high" }
        add_tag => ["threat_intel_match", "potential_threat", "ti_enriched", "domain_threat"]
      }
    }
  }
  
  # Process events with file hashes for threat intelligence enrichment
  if [file_hash] or [hash] or [md5] or [sha1] or [sha256] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "threat-intel-hash"
      user => "elastic"
      password => "${ELASTIC_PASSWORD:changeme}"
      query => "doc.indicator:%{[file_hash]} OR doc.indicator:%{[hash]} OR doc.indicator:%{[md5]} OR doc.indicator:%{[sha1]} OR doc.indicator:%{[sha256]}"
      fields => {
        "feed_name" => "ti_feed_name"
        "indicator" => "ti_indicator"
        "threat_type" => "ti_threat_type"
        "confidence" => "ti_confidence"
        "description" => "ti_description"
        "first_seen" => "ti_first_seen"
        "last_seen" => "ti_last_seen"
      }
    }
    
    # If a match is found, tag the event accordingly
    if [ti_indicator] {
      mutate {
        add_field => { "event_category" => "threat" }
        add_field => { "security_severity" => "critical" }
        add_tag => ["threat_intel_match", "malware_detected", "ti_enriched", "hash_threat"]
      }
    }
  }
  
  # Mark all processed events as enriched by this pipeline
  if ![ti_indicator] {
    mutate {
      add_tag => ["ti_enriched"]
    }
  }
} 